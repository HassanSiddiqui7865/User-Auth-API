// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.Model;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(TMSBackupContext))]
    [Migration("20240614063441_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.31")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("backend.Model.AssignedProject", b =>
                {
                    b.Property<Guid>("ProjectAssignedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsLead")
                        .HasColumnType("bit")
                        .HasColumnName("isLead");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("userId");

                    b.HasKey("ProjectAssignedId")
                        .HasName("PK__Assigned__7BD78415E9523B53");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("AssignedProject", (string)null);
                });

            modelBuilder.Entity("backend.Model.Book", b =>
                {
                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("bookId");

                    b.Property<string>("BookAuthor")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("bookAuthor");

                    b.Property<string>("BookDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("bookDescription");

                    b.Property<string>("BookName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("bookName");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("createdAt");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("imgUrl");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updatedAt");

                    b.HasKey("BookId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("backend.Model.Project", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("avatarUrl");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("createdAt");

                    b.Property<string>("Projectdescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Projectkey")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("projectkey");

                    b.Property<string>("Projectname")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updatedAt");

                    b.HasKey("ProjectId");

                    b.ToTable("PROJECTS", (string)null);
                });

            modelBuilder.Entity("backend.Model.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("roleId");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("roleName");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("backend.Model.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("RoomId")
                        .HasColumnType("int");

                    b.Property<string>("RoomName")
                        .HasMaxLength(100)
                        .HasColumnType("nchar(100)")
                        .IsFixedLength();

                    b.Property<string>("SessionId")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Token")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Room", (string)null);
                });

            modelBuilder.Entity("backend.Model.Ticket", b =>
                {
                    b.Property<Guid>("TicketId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ticketId");

                    b.Property<Guid?>("AssignedTo")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("assignedTo");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("createdAt");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("projectId");

                    b.Property<Guid>("ReportedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("reportedBy");

                    b.Property<string>("Ticketdescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("ticketdescription");

                    b.Property<string>("Ticketpriority")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ticketpriority");

                    b.Property<string>("Ticketstatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ticketstatus");

                    b.Property<string>("Ticketsummary")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ticketsummary");

                    b.Property<string>("Tickettype")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("tickettype");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updatedAt");

                    b.HasKey("TicketId");

                    b.HasIndex("AssignedTo");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ReportedBy");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("backend.Model.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("userId");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("createdAt");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("email");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("fullname");

                    b.Property<string>("Pass")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("pass");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("roleId");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("username");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("USERS", (string)null);
                });

            modelBuilder.Entity("backend.Model.AssignedProject", b =>
                {
                    b.HasOne("backend.Model.Project", "Project")
                        .WithMany("AssignedProjects")
                        .HasForeignKey("ProjectId")
                        .IsRequired()
                        .HasConstraintName("FK__AssignedP__Proje__412EB0B6");

                    b.HasOne("backend.Model.User", "User")
                        .WithMany("AssignedProjects")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__AssignedP__userI__403A8C7D");

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Model.Ticket", b =>
                {
                    b.HasOne("backend.Model.User", "AssignedToNavigation")
                        .WithMany("TicketAssignedToNavigations")
                        .HasForeignKey("AssignedTo")
                        .HasConstraintName("FK__Tickets__assigne__4222D4EF");

                    b.HasOne("backend.Model.Project", "Project")
                        .WithMany("Tickets")
                        .HasForeignKey("ProjectId")
                        .IsRequired()
                        .HasConstraintName("FK__Tickets__project__440B1D61");

                    b.HasOne("backend.Model.User", "ReportedByNavigation")
                        .WithMany("TicketReportedByNavigations")
                        .HasForeignKey("ReportedBy")
                        .IsRequired()
                        .HasConstraintName("FK__Tickets__reporte__4316F928");

                    b.Navigation("AssignedToNavigation");

                    b.Navigation("Project");

                    b.Navigation("ReportedByNavigation");
                });

            modelBuilder.Entity("backend.Model.User", b =>
                {
                    b.HasOne("backend.Model.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK__USERS__roleId__44FF419A");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("backend.Model.Project", b =>
                {
                    b.Navigation("AssignedProjects");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("backend.Model.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("backend.Model.User", b =>
                {
                    b.Navigation("AssignedProjects");

                    b.Navigation("TicketAssignedToNavigations");

                    b.Navigation("TicketReportedByNavigations");
                });
#pragma warning restore 612, 618
        }
    }
}
